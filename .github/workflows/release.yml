name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  get_version:
    name: Get version
    runs-on: ubuntu-latest
    steps:
      - id: set_output
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    outputs:
      version: ${{ steps.set_output.outputs.version }}
  test:
    name: Run tests
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.20'
          cache: true
      - run: go generate github.com/ycj3/agora-chat-cli/...
      - run: go test -v github.com/ycj3/agora-chat-cli/...
  build:
        name: Build
        runs-on: macos-latest
        needs: [get_version, test]
        steps:
          - uses: actions/checkout@v4
          - uses: actions/setup-go@v5
            with:
              go-version: '1.20'
              cache: true
          - run: go build -ldflags="-X github.com/ycj3/agora-chat-cli/cmd.version=$VERSION" -o agchat-$VERSION-windows-arm64.exe
            env:
              GOOS: windows
              GOARCH: arm64
              VERSION: ${{ needs.get_version.outputs.version }}
          - run: go build -ldflags="-X github.com/ycj3/agora-chat-cli/cmd.version=$VERSION" -o agchat-$VERSION-windows-amd64.exe
            env:
              GOOS: windows
              GOARCH: amd64
              VERSION: ${{ needs.get_version.outputs.version }}
          - run: go build -ldflags="-X github.com/ycj3/agora-chat-cli/cmd.version=$VERSION" -o agchat-$VERSION-linux-arm64
            env:
              GOOS: linux
              GOARCH: arm64
              VERSION: ${{ needs.get_version.outputs.version }}
          - run: go build -ldflags="-X github.com/ycj3/agora-chat-cli/cmd.version=$VERSION" -o agchat-$VERSION-linux-amd64
            env:
              GOOS: linux
              GOARCH: amd64
              VERSION: ${{ needs.get_version.outputs.version }}
          - run: go build -ldflags="-X github.com/ycj3/agora-chat-cli/cmd.version=$VERSION" -o agchat-$VERSION-macos-arm64
            env:
              GOOS: darwin
              GOARCH: arm64
              VERSION: ${{ needs.get_version.outputs.version }}
              CGO_CFLAGS: -mmacosx-version-min=10.15
              CGO_LDFLAGS: -mmacosx-version-min=10.15
              CGO_ENABLED: 1
          - run: go build -ldflags="-X github.com/ycj3/agora-chat-cli/cmd.version=$VERSION" -o agchat-$VERSION-macos-amd64
            env:
              GOOS: darwin
              GOARCH: amd64
              VERSION: ${{ needs.get_version.outputs.version }}
              CGO_CFLAGS: -mmacosx-version-min=10.15
              CGO_LDFLAGS: -mmacosx-version-min=10.15
              CGO_ENABLED: 1
          - uses: actions/upload-artifact@v4
            with:
              name: agchat-${{ needs.get_version.outputs.version }}-windows-arm64.exe
              path: agchat-${{ needs.get_version.outputs.version }}-windows-arm64.exe
              if-no-files-found: error
          - uses: actions/upload-artifact@v4
            with:
              name: agchat-${{ needs.get_version.outputs.version }}-windows-amd64.exe
              path: agchat-${{ needs.get_version.outputs.version }}-windows-amd64.exe
              if-no-files-found: error
          - uses: actions/upload-artifact@v4
            with:
              name: agchat-${{ needs.get_version.outputs.version }}-linux-arm64
              path: agchat-${{ needs.get_version.outputs.version }}-linux-arm64
              if-no-files-found: error
          - uses: actions/upload-artifact@v4
            with:
              name: agchat-${{ needs.get_version.outputs.version }}-linux-amd64
              path: agchat-${{ needs.get_version.outputs.version }}-linux-amd64
              if-no-files-found: error
          - uses: actions/upload-artifact@v4
            with:
              name: agchat-${{ needs.get_version.outputs.version }}-macos-arm64
              path: agchat-${{ needs.get_version.outputs.version }}-macos-arm64
              if-no-files-found: error
          - uses: actions/upload-artifact@v4
            with:
              name: agchat-${{ needs.get_version.outputs.version }}-macos-amd64
              path: agchat-${{ needs.get_version.outputs.version }}-macos-amd64
              if-no-files-found: error
  release_macos:
    name: Release for macOS
    runs-on: ubuntu-latest
    needs: [get_version, build, release_windows, release_linux]
    steps:
      - uses: actions/checkout@v4
        with:
          path: ./agora-chat-cli
      - uses: actions/download-artifact@v4
        with:
          name: agchat-${{ needs.get_version.outputs.version }}-macos-arm64
          path: bin
      - run: tar -czvf $BIN.tar.gz bin/$BIN && rm -rf bin/
        env:
          BIN: agchat-${{ needs.get_version.outputs.version }}-macos-arm64
      - uses: actions/download-artifact@v4
        with:
          name: agchat-${{ needs.get_version.outputs.version }}-macos-amd64
          path: bin
      - run: tar -czvf $FILE.tar.gz bin/$FILE && rm -rf bin/
        env:
          FILE: agchat-${{ needs.get_version.outputs.version }}-macos-amd64
      - name: Calculate SHA256 Checksum
        id: sha256
        run: |
          SHA256_ARM64=$(./agora-chat-cli/tools/sha256sum.sh agchat-${{ needs.get_version.outputs.version }}-macos-arm64.tar.gz)
          SHA256_AMD64=$(./agora-chat-cli/tools/sha256sum.sh agchat-${{ needs.get_version.outputs.version }}-macos-amd64.tar.gz)
          echo $SHA256_ARM64 > agchat-${{ needs.get_version.outputs.version }}-macos-arm64.tar.gz.sha256sum
          echo $SHA256_AMD64 > agchat-${{ needs.get_version.outputs.version }}-macos-amd64.tar.gz.sha256sum
          echo "sha256_arm64=$SHA256_ARM64" >> $GITHUB_OUTPUT
          echo "sha256_amd64=$SHA256_AMD64" >> $GITHUB_OUTPUT
      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: agchat-${{ needs.get_version.outputs.version }}-macos-*
          tag: ${{ github.ref }}
          overwrite: false
          file_glob: true
      - uses: actions/checkout@v4
        with: 
          repository: ${{ secrets.HOMEBREW_AGCHAT }}
          ref: main
          token: ${{ secrets.GH_TOKEN }}
          path: homebrew-agchat
      -  run: | 
          cd homebrew-agchat
          VERSION=${{ needs.get_version.outputs.version }}
          SHA256_ARM64=${{ steps.sha256.outputs.sha256_arm64 }}
          SHA256_AMD64=${{ steps.sha256.outputs.sha256_amd64 }}
          FORMULA_FILE=Formula/agchat.rb
          sed -i "4s/.*/    version \"$VERSION\"/" $FORMULA_FILE
          sed -i "7s/.*/      url \"https:\/\/github.com\/ycj3\/agora-chat-cli\/releases\/download\/v$VERSION\/agchat-$VERSION-macos-arm64.tar.gz\"/" $FORMULA_FILE
          sed -i "8s/.*/      sha256 \"$SHA256_ARM64\"/" $FORMULA_FILE
          sed -i "10s/.*/      url \"https:\/\/github.com\/ycj3\/agora-chat-cli\/releases\/download\/v$VERSION\/agchat-$VERSION-macos-amd64.tar.gz\"/" $FORMULA_FILE
          sed -i "11s/.*/      sha256 \"$SHA256_AMD64\"/" $FORMULA_FILE
          sed -i "16s/.*/        bin.install \"agchat-$VERSION-macos-arm64\" => \"agchat\"/" $FORMULA_FILE
          sed -i "18s/.*/        bin.install \"agchat-$VERSION-macos-amd64\" => \"agchat\"/" $FORMULA_FILE
          git config --local user.name "${{ secrets.GH_NAME }}"
          git config --local user.email "${{ secrets.GH_EMAIL }}"
          git add Formula/agchat.rb
          git commit -m "Update agchat to $VERSION"
          git remote set-url origin git@github.com:ycj3/homebrew-agchat.git
          git push "https://${{ secrets.GH_TOKEN }}@github.com/${{ secrets.HOMEBREW_AGCHAT }}.git" --set-upstream "main"
  release_windows:
    name: Release for Windows
    runs-on: ubuntu-latest
    needs: [get_version, build]
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64, amd64 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: agchat-${{ needs.get_version.outputs.version }}-windows-${{ matrix.arch }}.exe
          path: bin
      - run: tar -czvf $FILE.tar.gz bin/$FILE.exe
        env:
          FILE: agchat-${{ needs.get_version.outputs.version }}-windows-${{ matrix.arch }}
      - run: ./tools/sha256sum.sh $TARBALL > $TARBALL.sha256sum
        env:
          TARBALL: agchat-${{ needs.get_version.outputs.version }}-windows-${{ matrix.arch }}.tar.gz
      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: agchat-${{ needs.get_version.outputs.version }}-windows-${{ matrix.arch }}.*
          tag: ${{ github.ref }}
          overwrite: false
          file_glob: true
  release_linux:
    name: Release for Linux
    runs-on: ubuntu-latest
    needs: [get_version, build, release_windows]
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64, amd64 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: agchat-${{ needs.get_version.outputs.version }}-linux-${{ matrix.arch }}
          path: bin
      - run: tar -czvf $FILE.tar.gz bin/$FILE
        env:
          FILE: agchat-${{ needs.get_version.outputs.version }}-linux-${{ matrix.arch }}
      - run: ./tools/sha256sum.sh $TARBALL > $TARBALL.sha256sum
        env:
          TARBALL: agchat-${{ needs.get_version.outputs.version }}-linux-${{ matrix.arch }}.tar.gz
      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          file: agchat-${{ needs.get_version.outputs.version }}-linux-${{ matrix.arch }}.*
          tag: ${{ github.ref }}
          overwrite: false
          file_glob: true